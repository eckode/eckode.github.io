{"version":3,"file":"js/bundle.be0652cdbcab3ac048e1.min.js","mappings":"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","sources":["webpack://@eckode/components/./src/utils/parse.ts","webpack://@eckode/components/./src/components/resizable/Resizable.ts"],"sourcesContent":["interface ParseCssVarArgs {\n  cssVar: string;\n  parser?: \"parseInt\" | \"parseFloat\" | \"\";\n  element: HTMLElement | Element;\n}\n\nexport const getCssVar = ({ element, cssVar }: ParseCssVarArgs) => {\n  if(element instanceof HTMLElement){\n    return element.style.getPropertyValue(cssVar).trim();\n  }\n  return '';\n}\n\nexport const parsIntCssVar = ({\n  cssVar,\n  element = document.body,\n}: ParseCssVarArgs) => {\n  const cssVariable = getCssVar({ element, cssVar });\n  if (\"\" === cssVariable) {\n    return 0;\n  }\n  return parseInt(cssVariable);\n};\n\nexport const parsePercentages = ({\n  total,\n  startAt = 0,\n  percentage = 25,\n}: {\n  total: number;\n  startAt?: number;\n  percentage?: number;\n}): number[] => {\n  const percentageIncrement = (total / 100) * percentage;\n  const percentageSteps = 100 / percentage;\n  return [\n    ...[...Array(percentageSteps)].map((_, i) => {\n      if (0 === i) {\n        return startAt;\n      }\n      return parseFloat((i * percentageIncrement).toFixed(2)) + startAt;\n    }),\n    total,\n  ];\n};\n","import { parsIntCssVar, getCssVar, parsePercentages } from \"../../utils/parse\";\n\nconst mandatory = (param: string) => {\n  throw new Error(`${param} param is missing!`);\n};\n\ntype Elementish = HTMLElement | Element;\n\ntype Data = {\n  direction: 'bottom-top' | 'top-bottom' | 'left-right' | 'right-left'\n  currentHeight: number;\n  expanding: boolean;\n  hasInteracted: boolean;\n  minHeight: number;\n  maxHeight: number;\n  offset: number;\n  prevHeight: number;\n  originalY: number;\n  originalPointerY: number;\n  snap: string;\n  snapThreshold: number;\n  currentPercentage: number;\n  dragDirection: null | \"up\" | \"down\" | \"right\" | \"left\";\n  isOpen: boolean;\n};\n\n// @ts-ignore\nwindow.ECKODE = {\n  debug: {\n    resizeCount: 0,\n  },\n};\n\nclass Resizable {\n  // Class added to body during resize\n  static ACTIVE_BODY_CLASS: string = \"resize-in-progress\";\n\n  el: {\n    body: HTMLElement; // Class added to body during resize\n    container: Elementish;\n    resizer: HTMLElement;\n    handle: HTMLElement;\n    debug: HTMLElement;\n  };\n\n  data: Data;\n\n  // Static\n  snapPoints: number[] = [];\n  handleHeight: number;\n\n  constructor(\n    container: Elementish = mandatory(\"container\"),\n    {\n      elementResizer,\n      elementHandle,\n    }: {\n      elementResizer?: HTMLElement;\n      elementHandle?: HTMLElement;\n    } = {}\n  ) {\n    this.el = {\n      body: document.body,\n      container,\n      resizer:\n        elementResizer ??\n        (container.getElementsByClassName(\n          \"ec-resizable__resizer\"\n        )[0] as HTMLElement),\n      handle:\n        elementHandle ??\n        (container.getElementsByClassName(\n          \"ec-resizable__resizer-handle\"\n        )?.[0] as HTMLElement),\n      debug: container.getElementsByClassName(\n        \"ec-resizable__debug\"\n      )?.[0] as HTMLElement,\n    };\n\n    this.handleHeight =\n      parsIntCssVar({\n        cssVar: \"--ec-resizable-handle-height\",\n        element: this.el.container,\n      }) ?? this.el.handle.clientHeight;\n    const snap = getCssVar({\n      cssVar: \"--ec-resizable-snap\",\n      element: this.el.container,\n    });\n    const snapThreshold =\n      parsIntCssVar({\n        cssVar: \"--ec-resizable-snap-threshold\",\n        element: this.el.container,\n      }) ?? 0;\n\n    const offset = this.handleHeight / 2;\n\n    this.snapPoints = parsePercentages({\n      total: this.el.container.clientHeight,\n      percentage: 25,\n      startAt: this.handleHeight,\n    });\n\n    if (\n      this.el.container.getElementsByClassName(\"ec-resizable__debug-snap-point\")\n        .length === 0\n    ) {\n      for (let i = 0, m = this.snapPoints.length; i < m; i++) {\n        const point = document.createElement(\"hr\");\n        point.classList.add(\"ec-resizable__debug-snap-point\");\n        // @TODO Custom\n        point.style.bottom = `${this.snapPoints[i]}px`;\n        this.el.container.append(point);\n      }\n    }\n\n    this.data = new Proxy(\n      {\n        // @TODO Custom\n        direction: 'bottom-top',\n        currentHeight: 0,\n        expanding: false,\n        hasInteracted: false,\n        minHeight: this.handleHeight,\n        maxHeight: this.el.container.clientHeight,\n        offset,\n        prevHeight: 0,\n        originalY: 0,\n        originalPointerY: 0,\n        dragDirection: null,\n        currentPercentage: 0,\n        snap,\n        snapThreshold,\n        isOpen: false,\n      },\n      {\n        get: (target, prop) => {\n          // Custom logic on property read\n          console.log(`Property ${String(prop)} was read`);\n          return target[prop as keyof typeof target];\n        },\n        set: (target, prop, value) => {\n          // Custom logic on property assignment\n          console.log(`Property ${String(prop)} was set to ${value}`);\n          // @ts-ignore\n          target[prop as keyof typeof target] = value;\n          this.el.debug.innerHTML = `<pre>${JSON.stringify(\n            this.data,\n            null,\n            2\n          )}</pre>`;\n          return true; // Indicates that assignment succeeded\n        },\n        // ... other handlers\n      }\n    );\n\n    // Bind Resizable to event handlers\n    this.resize = this.resize.bind(this);\n    this.stopResize = this.stopResize.bind(this);\n    this.initialiseResize = this.initialiseResize.bind(this);\n\n    // console.log(this.data, this.el);\n\n    this.el.handle.addEventListener(\"pointerdown\", this.initialiseResize);\n  }\n\n  initialiseResize(e: PointerEvent) {\n    console.log(\"Resizable.initialiseResize()\");\n    e.stopPropagation();\n    this.data.hasInteracted ||= this.hasInteracted();\n\n    if (!this.el.body.classList.contains(Resizable.ACTIVE_BODY_CLASS)) {\n      this.el.body.classList.add(Resizable.ACTIVE_BODY_CLASS);\n    }\n    this.data.prevHeight = parseFloat(\n      getComputedStyle(this.el.resizer, null)\n        .getPropertyValue(\"height\")\n        .replace(\"px\", \"\")\n    );\n    this.data.currentHeight = this.data.prevHeight;\n    this.data.originalY = this.el.resizer.getBoundingClientRect().top;\n    this.data.originalPointerY = e.pageY;\n\n    window.addEventListener(\"pointermove\", this.resize);\n  }\n\n  hasInteracted() {\n    console.log(\"Resizable.hasInteracted()\");\n    window.addEventListener(\"pointerup\", this.stopResize);\n    this.el.body.addEventListener(\"pointerleave\", this.stopResize);\n    return true;\n  }\n\n  pointerUp() {\n    this.stopResize();\n  }\n\n  /**\n   * Resize listener callback\n   *\n   * @param {PointerEvent} e Pointer event object\n   */\n  resize(e: PointerEvent) {\n    const height = parseFloat(\n      (this.data.prevHeight - (e.pageY - this.data.originalPointerY)).toFixed(2)\n    );\n    if (height === this.data.currentHeight) {\n      return;\n    }\n    this.data.expanding = this.data.currentHeight < height;\n    this.data.currentHeight = height;\n\n    for (let i = 0; i < this.snapPoints.length; i++) {\n      if (\n        height >= this.snapPoints[i] &&\n        (i === this.snapPoints.length - 1 || height < this.snapPoints[i + 1])\n      ) {\n        this.data.currentPercentage = i;\n        break;\n      }\n    }\n\n    // Closed\n    if (height - this.data.minHeight <= this.data.snapThreshold) {\n      this.el.resizer.style.height = `${this.data.minHeight}px`;\n    }\n    // Open\n    else if (this.data.maxHeight - height <= this.data.snapThreshold) {\n      this.el.resizer.style.height = `${this.data.maxHeight}px`;\n    }\n    // Height\n    else if (height < this.data.maxHeight) {\n      this.el.resizer.style.height = `${height}px`;\n    }\n  }\n\n  stopResize() {\n    if (\n      +this.data.prevHeight.toFixed(2) !== +this.data.currentHeight.toFixed(2)\n    ) {\n      if (this.el.body.classList.contains(Resizable.ACTIVE_BODY_CLASS)) {\n        this.el.body.classList.remove(Resizable.ACTIVE_BODY_CLASS);\n      }\n      this.data.prevHeight = parseFloat(this.data.currentHeight.toFixed(2));\n      if (this.data.snap) {\n        let snapTo: number = this.data.currentHeight;\n        if (this.data.snap === \"closest\") {\n          snapTo = this.snapPoints.reduce((prev, curr) =>\n            Math.abs(curr - this.data.currentHeight) <\n            Math.abs(prev - this.data.currentHeight)\n              ? curr\n              : prev\n          );\n        } else if (this.data.snap === \"next\") {\n          const isUp = this.data.currentHeight > this.data.prevHeight;\n          snapTo =\n            this.snapPoints[\n              isUp\n                ? this.data.currentPercentage + 1\n                : this.data.currentPercentage\n            ];\n        }\n        this.el.resizer.style.height = `${snapTo}px`;\n        this.data.currentHeight = snapTo;\n      }\n    }\n    window.removeEventListener(\"pointermove\", this.resize);\n  }\n}\n\nconst [resizerContainer] = document.getElementsByClassName(\"ec-resizable\");\nnew Resizable(resizerContainer);\n"],"names":["getCssVar","_ref","element","cssVar","HTMLElement","style","getPropertyValue","trim","parsIntCssVar","_ref2","_ref2$element","document","body","cssVariable","parseInt","window","ECKODE","debug","resizeCount","Resizable","_container$getElement","_container$getElement2","_parsIntCssVar","_parsIntCssVar2","_this","container","arguments","length","undefined","Error","concat","mandatory","elementResizer","elementHandle","_classCallCheck","_defineProperty","this","el","resizer","getElementsByClassName","handle","handleHeight","clientHeight","_ref3","total","_ref3$startAt","startAt","_ref3$percentage","percentage","percentageIncrement","snap","snapThreshold","offset","snapPoints","_toConsumableArray","Array","map","_","i","parseFloat","toFixed","m","point","createElement","classList","add","bottom","append","data","Proxy","direction","currentHeight","expanding","hasInteracted","minHeight","maxHeight","prevHeight","originalY","originalPointerY","dragDirection","currentPercentage","isOpen","get","target","prop","console","log","String","set","value","innerHTML","JSON","stringify","resize","bind","stopResize","initialiseResize","addEventListener","key","e","_this$data","stopPropagation","contains","ACTIVE_BODY_CLASS","getComputedStyle","replace","getBoundingClientRect","top","pageY","height","_this2","remove","snapTo","reduce","prev","curr","Math","abs","isUp","removeEventListener"],"sourceRoot":""}